# Price prediction with RandomForestRegressor
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

def prepare_data(df):

    df = df.sort_index()

    # Creating lag features (previous days' prices)
    for lag in range(1, 6):
        df[f'lag_{lag}'] = df['Adj Close'].shift(lag)
    
    # Drop NaN values generated by shifting
    df = df.dropna()

    # Only keeping relevant features
    features = ['lag_1', 'lag_2', 'lag_3', 'lag_4', 'lag_5', 'Volume_MA10', 'RSI_14', 'MACD_12_26_9', 'MACDh_12_26_9', 'MACDs_12_26_9']
    df = df[features + ['Adj Close']]
    
    return df

def train_and_predict(df):
    # Define features and target
    X = df.drop(columns=['Adj Close'])
    y = df['Adj Close']

    # Split data into training and testing sets 80% to 20%
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

    # Initialize and train the model
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # Make predictions
    y_pred = model.predict(X_test)

    # Calculate evaluation metrics
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    model_score = r2_score(y_test, y_pred)

    # Predict the next day's price
    last_observation = X.iloc[-1].values.reshape(1, -1)
    predicted_price = model.predict(last_observation)[0]

    return predicted_price, model_score, y_test, y_pred, mae, mse

def advanced_ml_model(df):
    # This function is identical to train_and_predict, but can be expanded with more advanced models or techniques.
    return train_and_predict(df)
